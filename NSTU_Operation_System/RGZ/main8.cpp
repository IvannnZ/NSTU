#include <iostream>
#include <thread>
#include <atomic>
#include <mutex>
#include <cmath>
#include <chrono>
#include <iomanip>

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
constexpr double PI = 3.141592653589793;
constexpr int HOURS_IN_DAY = 24;
constexpr int SIMULATION_SPEED = 3600; // 1 —Å–µ–∫ = 1 —á–∞—Å

// –ú–æ—â–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–ú–í—Ç)
constexpr double GG1_POWER = 100.0;
constexpr double GG2_POWER = 100.0;
constexpr double GG3_POWER = 120.0;
constexpr double GG4_POWER = 120.0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
std::mutex data_mutex;
double p1_power = 0.0, p2_power = 0.0, p3_power = 0.0;
bool gg4_enabled = false;
std::atomic<bool> stop_simulation(false);

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
double calculate_power(double base, double amplitude, int hour) {
    return base + amplitude * std::sin(PI / 2 * (hour / 6.0 - 1));
}

// –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
void consumer_thread(int id, double base_power, double amplitude) {
    while (!stop_simulation) {
        auto now = std::chrono::system_clock::now();
        auto since_epoch = now.time_since_epoch();
        int current_hour = (std::chrono::duration_cast<std::chrono::seconds>(since_epoch).count() / SIMULATION_SPEED) % HOURS_IN_DAY;

        double power = calculate_power(base_power, amplitude, current_hour);

        {
            std::lock_guard<std::mutex> lock(data_mutex);
            if (id == 1) p1_power = power;
            else if (id == 2) p2_power = power;
            else if (id == 3) p3_power = power;
        }

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}

// –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
void generator_controller_thread() {
    while (!stop_simulation) {
        double total_power_needed, total_power_available;

        {
            std::lock_guard<std::mutex> lock(data_mutex);
            total_power_needed = p1_power + p2_power + p3_power;
            total_power_available = GG1_POWER + GG2_POWER + GG3_POWER + (gg4_enabled ? GG4_POWER : 0.0);
        }

        // –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –ì–ì4
        bool need_gg4 = (total_power_needed > (GG1_POWER + GG2_POWER + GG3_POWER));

        {
            std::lock_guard<std::mutex> lock(data_mutex);
            gg4_enabled = need_gg4;
        }

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
void print_stats() {
    while (!stop_simulation) {
        std::system("clear"); // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è Linux)

        double p1, p2, p3, total_power;
        bool gg4_on;

        {
            std::lock_guard<std::mutex> lock(data_mutex);
            p1 = p1_power;
            p2 = p2_power;
            p3 = p3_power;
            gg4_on = gg4_enabled;
            total_power = p1 + p2 + p3;
        }

        auto now = std::chrono::system_clock::now();
        auto since_epoch = now.time_since_epoch();
        int current_hour = (std::chrono::duration_cast<std::chrono::seconds>(since_epoch).count() / SIMULATION_SPEED % HOURS_IN_DAY);

        std::cout << "‚è∞ –¢–µ–∫—É—â–∏–π —á–∞—Å: " << current_hour << "\n\n";
        std::cout << "‚ö° –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å:\n";
        std::cout << "  P1: " << std::fixed << std::setprecision(2) << p1 << " –ú–í—Ç\n";
        std::cout << "  P2: " << p2 << " –ú–í—Ç\n";
        std::cout << "  P3: " << p3 << " –ú–í—Ç\n";
        std::cout << "  –û–±—â–∞—è: " << total_power << " –ú–í—Ç\n\n";

        std::cout << "üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:\n";
        std::cout << "  –ì–ì1: " << GG1_POWER << " –ú–í—Ç (–≤–∫–ª)\n";
        std::cout << "  –ì–ì2: " << GG2_POWER << " –ú–í—Ç (–≤–∫–ª)\n";
        std::cout << "  –ì–ì3: " << GG3_POWER << " –ú–í—Ç (–≤–∫–ª)\n";
        std::cout << "  –ì–ì4: " << GG4_POWER << " –ú–í—Ç (" << (gg4_on ? "–≤–∫–ª" : "–≤—ã–∫–ª") << ")\n";

        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

int main() {
    std::cout << "üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ì–≠–°...\n";

    // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    std::thread consumer1(consumer_thread, 1, 100.0, 20.0);
    std::thread consumer2(consumer_thread, 2, 180.0, 50.0);
    std::thread consumer3(consumer_thread, 3, 90.0, 20.0);
    std::thread controller(generator_controller_thread);
    std::thread stats(print_stats);

    // –û–∂–∏–¥–∞–Ω–∏–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    std::cin.get();
    stop_simulation = true;

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
    consumer1.join();
    consumer2.join();
    consumer3.join();
    controller.join();
    stats.join();

    std::cout << "\nüõë –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n";
    return 0;
}