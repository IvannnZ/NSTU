#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, binding = 0) uniform image2D outputTexture;

struct Sphere {
    vec3 position;
    float radius;
};

layout(std430, binding = 0) buffer Spheres {
    Sphere spheres[];
};

uniform mat4 viewProjMatrix;
uniform vec3 cameraPos;
uniform float time;

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(texCoord) / vec2(imageSize(outputTexture));
    uv = uv * 2.0 - 1.0; // Правильная трансформация UV
    
    // Ray setup
    vec4 rayClip = vec4(uv, 1.0, 1.0);
    vec4 rayEye = inverse(viewProjMatrix) * rayClip;
    vec3 rayDir = normalize(rayEye.xyz / rayEye.w);
    
    // Ray-sphere intersection
    vec3 color = vec3(0.0);
    for(int i = 0; i < spheres.length(); i++) {
        Sphere sphere = spheres[i];
        vec3 oc = cameraPos - sphere.position;
        float a = dot(rayDir, rayDir);
        float b = 2.0 * dot(oc, rayDir);
        float c = dot(oc, oc) - sphere.radius * sphere.radius;
        float disc = b * b - 4 * a * c;
        
        if(disc >= 0.0) { // Исправлено условие
            color = vec3(1.0, 0.0, 0.0);
            break;
        }
    }
    
    imageStore(outputTexture, texCoord, vec4(color, 1.0));
}